{"ast":null,"code":"var _jsxFileName = \"/Volumes/imac_barbara_1TB/Users/barbara/BARBY/Programacion_Front-End/Adalab/project-promo-m-module-3-team-6/project/src/components/GetAvatar.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport defaultAvatar from \"../images/defaultAvatar.png\";\nimport \"../stylesheet/layout/_GetAvatar.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass GetAvatar extends React.Component {\n  constructor(props) {\n    super(props); // creamos una propiedad de la clase que es la que vamos a usar en varios métodos para cargar la imagen\n    // esto es un manejador de ficheros\n\n    this.fr = new FileReader(); // creamos un React.createRef porque React no gestiona los <input type=\"file\" /> por ello tenemos que gestionarlo por nuestra cuenta\n\n    this.myFileField = /*#__PURE__*/React.createRef(); // this.myFileField = document.querySelecto('input')\n    // estos son los bind normales que siempre ponemos\n\n    this.uploadImage = this.uploadImage.bind(this);\n    this.getImage = this.getImage.bind(this);\n  }\n\n  uploadImage(ev) {\n    // cuando pulsamos en la label o en <input type=\"file\" />:\n    // 1º se abre la ventana de nuestro ordenador para elegir un fichero\n    // 2º cuando la usuaria elije un fichero se ejecuta este método manejador de eventos\n    console.log(\"La usuaria ha abierto la ventana para elegir ficheros\"); // cuando se abre la ventana de nuestro navegador podemos elegir uno o varios ficheros por ello ev.currentTarget.files es una array\n\n    console.log(\"La usuaria ha elegido los ficheros\", ev.currentTarget.files); // para este ejercicio nos interesa solo el primero de los ficheros elegidos por la usuaria, por eso ponemos [0]\n    // este primer fichero es un objeto con información útil del fichero como: nombre, última modificación, tamaño del fichero...\n    // este objeto no tiene información privada del ordenador de la usuaria, por ejemplo no tenemos información de la carpeta en la que está la imagen\n\n    console.log(\"El primero de los ficheros elegidos es\", ev.currentTarget.files[0]); // compruebo si la usuaria ha elegido al menos un fichero\n\n    if (ev.currentTarget.files.length > 0) {\n      // guardo el primer fichero en myFile\n      const myFile = ev.currentTarget.files[0]; // añado un evento load al manejador de ficheros\n      // por qué añado un evento, pues porque esto es una acción asíncrona, imaginemos que el fichero pesa 5 Gb, el navegador puede tardar unos cuantos segundos en cargar y procesar el fichero, por eso le decimos \"navegador, cuando termines de cargar el fichero me ejecutas el método this.image\"\n\n      this.fr.addEventListener(\"load\", this.getImage); // le digo al manejador de ficheros que maneje, que cargue el fichero\n\n      this.fr.readAsDataURL(myFile);\n    } // si la usuaria no ha elegido ningún fichero y ha puslado en cerrar la ventana de nuestro ordenador, no hago nada\n\n  }\n\n  getImage() {\n    // cuando el navegador termina de manejar el fichero se ejecuta este método porque lo hemos indicado en this.fr.addEventListener('load', this.getImage);\n    // this.fr guarda información útil sobre el fichero cargado\n    console.log(\"Información útil sobre el fichero cargado\", this.fr); // this.fr.result contiene los datos del fichero en un formato que se llama base64 que nos vale por que podemos usarlo para pintar una imagen en HTML\n\n    const image = this.fr.result; // aquí hago lifting con los datos del fichero\n    // lo que haga el componente madre con esta información es otro problema diferente\n\n    this.props.updateAvatar(image);\n  }\n\n  render() {\n    const avatar = this.props.avatar === \"\" ? defaultAvatar : this.props.avatar;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"get-avatar\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"details__photo-button\",\n        type: \"button\",\n        children: [\"Get avatar!\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          ref: this.myFileField,\n          className: \"action__hiddenField js__profile-upload-btn\",\n          onChange: this.uploadImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"get-avatar__preview\",\n        style: {\n          backgroundImage: `url(${avatar})`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nGetAvatar.propTypes = {\n  avatar: PropTypes.string.isRequired,\n  updateAvatar: PropTypes.func.isRequired\n};\nexport default GetAvatar;","map":{"version":3,"sources":["/Volumes/imac_barbara_1TB/Users/barbara/BARBY/Programacion_Front-End/Adalab/project-promo-m-module-3-team-6/project/src/components/GetAvatar.js"],"names":["React","PropTypes","defaultAvatar","GetAvatar","Component","constructor","props","fr","FileReader","myFileField","createRef","uploadImage","bind","getImage","ev","console","log","currentTarget","files","length","myFile","addEventListener","readAsDataURL","image","result","updateAvatar","render","avatar","backgroundImage","propTypes","string","isRequired","func"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport defaultAvatar from \"../images/defaultAvatar.png\";\r\nimport \"../stylesheet/layout/_GetAvatar.scss\";\r\n\r\nclass GetAvatar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // creamos una propiedad de la clase que es la que vamos a usar en varios métodos para cargar la imagen\r\n    // esto es un manejador de ficheros\r\n    this.fr = new FileReader();\r\n\r\n    // creamos un React.createRef porque React no gestiona los <input type=\"file\" /> por ello tenemos que gestionarlo por nuestra cuenta\r\n    this.myFileField = React.createRef(); // this.myFileField = document.querySelecto('input')\r\n\r\n    // estos son los bind normales que siempre ponemos\r\n    this.uploadImage = this.uploadImage.bind(this);\r\n    this.getImage = this.getImage.bind(this);\r\n  }\r\n\r\n  uploadImage(ev) {\r\n    // cuando pulsamos en la label o en <input type=\"file\" />:\r\n    // 1º se abre la ventana de nuestro ordenador para elegir un fichero\r\n    // 2º cuando la usuaria elije un fichero se ejecuta este método manejador de eventos\r\n    console.log(\"La usuaria ha abierto la ventana para elegir ficheros\");\r\n\r\n    // cuando se abre la ventana de nuestro navegador podemos elegir uno o varios ficheros por ello ev.currentTarget.files es una array\r\n    console.log(\"La usuaria ha elegido los ficheros\", ev.currentTarget.files);\r\n\r\n    // para este ejercicio nos interesa solo el primero de los ficheros elegidos por la usuaria, por eso ponemos [0]\r\n    // este primer fichero es un objeto con información útil del fichero como: nombre, última modificación, tamaño del fichero...\r\n    // este objeto no tiene información privada del ordenador de la usuaria, por ejemplo no tenemos información de la carpeta en la que está la imagen\r\n    console.log(\r\n      \"El primero de los ficheros elegidos es\",\r\n      ev.currentTarget.files[0]\r\n    );\r\n\r\n    // compruebo si la usuaria ha elegido al menos un fichero\r\n    if (ev.currentTarget.files.length > 0) {\r\n      // guardo el primer fichero en myFile\r\n      const myFile = ev.currentTarget.files[0];\r\n\r\n      // añado un evento load al manejador de ficheros\r\n      // por qué añado un evento, pues porque esto es una acción asíncrona, imaginemos que el fichero pesa 5 Gb, el navegador puede tardar unos cuantos segundos en cargar y procesar el fichero, por eso le decimos \"navegador, cuando termines de cargar el fichero me ejecutas el método this.image\"\r\n      this.fr.addEventListener(\"load\", this.getImage);\r\n\r\n      // le digo al manejador de ficheros que maneje, que cargue el fichero\r\n      this.fr.readAsDataURL(myFile);\r\n    }\r\n    // si la usuaria no ha elegido ningún fichero y ha puslado en cerrar la ventana de nuestro ordenador, no hago nada\r\n  }\r\n\r\n  getImage() {\r\n    // cuando el navegador termina de manejar el fichero se ejecuta este método porque lo hemos indicado en this.fr.addEventListener('load', this.getImage);\r\n\r\n    // this.fr guarda información útil sobre el fichero cargado\r\n    console.log(\"Información útil sobre el fichero cargado\", this.fr);\r\n\r\n    // this.fr.result contiene los datos del fichero en un formato que se llama base64 que nos vale por que podemos usarlo para pintar una imagen en HTML\r\n    const image = this.fr.result;\r\n\r\n    // aquí hago lifting con los datos del fichero\r\n    // lo que haga el componente madre con esta información es otro problema diferente\r\n    this.props.updateAvatar(image);\r\n  }\r\n\r\n  render() {\r\n    const avatar = this.props.avatar === \"\" ? defaultAvatar : this.props.avatar;\r\n    return (\r\n      <div className=\"get-avatar\">\r\n        <label className=\"details__photo-button\" type=\"button\">\r\n          Get avatar!\r\n          <input\r\n            type=\"file\"\r\n            ref={this.myFileField}\r\n            className=\"action__hiddenField js__profile-upload-btn\"\r\n            onChange={this.uploadImage}\r\n          />\r\n        </label>\r\n\r\n        <div\r\n          className=\"get-avatar__preview\"\r\n          style={{ backgroundImage: `url(${avatar})` }}\r\n        ></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nGetAvatar.propTypes = {\r\n  avatar: PropTypes.string.isRequired,\r\n  updateAvatar: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default GetAvatar;\r\n"]},"metadata":{},"sourceType":"module"}